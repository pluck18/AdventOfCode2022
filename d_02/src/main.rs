use std::collections::HashMap;
use once_cell::sync::Lazy;

fn main() {
    let data_str = get_data_str();
    
    println!("{}", first_challenge(data_str));
    
    println!("{}", second_challenge(data_str));
}

#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    #[test]
    fn test_shape() {
        let data_str = "A Y
B X
C Z";
        let score = first_challenge(data_str);
        assert_eq!(score, 15);
    }

    #[test]
    fn test_win_state() {
        let data_str = "A Y
B X
C Z";
        let score = second_challenge(data_str);
        assert_eq!(score, 12);
    }
}


#[derive(Eq, Hash, PartialEq, Clone, Copy)]
enum Shape { Rock, Paper, Scissor }

#[derive(Eq, Hash, PartialEq, Clone, Copy)]
enum WinState { Loss, Draw, Win }

struct RoundShape {
    opponent_choice: Shape,
    player_choice: Shape,
}

struct RoundWinState {
    opponent_choice: Shape,
    win_state: WinState,
}

fn first_challenge(data_str:&str) -> i32 {
    let round_shapes = parse_all_round_shape(data_str);
    let score = compute_total_score(&round_shapes);
    return score;
}

fn second_challenge(data_str:&str) -> i32 {
    let win_states = parse_all_round_win_state(data_str);
    let round_shapes = compute_round_shapes(&win_states);
    let score = compute_total_score(&round_shapes);
    return score;
}

fn parse_all_round_shape(data_str:&str) -> Vec<RoundShape> {
    data_str.split("\n").map(|str| parse_single_round_shape(str)).collect()
}

fn parse_single_round_shape(round_str:&str) -> RoundShape {
    let round_data:Vec<Shape> = round_str.split(" ").map(|v| convert_to_shape(v)).collect();
    RoundShape {
        opponent_choice: round_data.get(0).unwrap().clone(),
        player_choice: round_data.get(1).unwrap().clone(),
    }
}

fn parse_all_round_win_state(data_str:&str) -> Vec<RoundWinState> {
    data_str.split("\n").map(|str| parse_single_win_state(str)).collect()
}

fn parse_single_win_state(round_str:&str) -> RoundWinState {
    let round_data:Vec<&str> = round_str.split(" ").collect();
    RoundWinState {
        opponent_choice: convert_to_shape(round_data.get(0).unwrap().clone()),
        win_state: convert_to_win_state(round_data.get(1).unwrap().clone()),
    }
}

fn convert_to_shape(k:&str) -> Shape {
    return SHAPES_CONVERTER_MAP.get(k).unwrap().clone();
}

static SHAPES_CONVERTER_MAP: Lazy<HashMap<&'static str, Shape>> = Lazy::new(|| {
    let mut shapes: HashMap<&'static str, Shape> = HashMap::new();

    shapes.insert("A", Shape::Rock);
    shapes.insert("B", Shape::Paper);
    shapes.insert("C", Shape::Scissor);
    
    shapes.insert("X", Shape::Rock);
    shapes.insert("Y", Shape::Paper);
    shapes.insert("Z", Shape::Scissor);
    return shapes;
});

fn convert_to_win_state(k:&str) -> WinState {
    return WINSTATES_CONVERTER_MAP.get(k).unwrap().clone();
}

static WINSTATES_CONVERTER_MAP: Lazy<HashMap<&'static str, WinState>> = Lazy::new(|| {
    let mut win_states: HashMap<&'static str, WinState> = HashMap::new();

    win_states.insert("X", WinState::Loss);
    win_states.insert("Y", WinState::Draw);
    win_states.insert("Z", WinState::Win);
    return win_states;
});

fn compute_round_shapes(win_states:&Vec<RoundWinState>) -> Vec<RoundShape> {
    return win_states.iter().map(|win_state| compute_single_round_shape(win_state)).collect();
}

fn compute_single_round_shape(round_win_state:&RoundWinState) -> RoundShape {
    let opponent_choice = round_win_state.opponent_choice;
    let win_state = round_win_state.win_state;

    if win_state == WinState::Draw {
        return RoundShape {
            opponent_choice: opponent_choice,
            player_choice: opponent_choice,
        }
    }

    if win_state == WinState::Loss {
        if opponent_choice == Shape::Rock {
            return RoundShape {
                opponent_choice: opponent_choice,
                player_choice: Shape::Scissor,
            }
        }
        else if opponent_choice == Shape::Paper {
            return RoundShape {
                opponent_choice: opponent_choice,
                player_choice: Shape::Rock,
            }
        }
        else if opponent_choice == Shape::Scissor {
            return RoundShape {
                opponent_choice: opponent_choice,
                player_choice: Shape::Paper,
            }
        }
    }
    else if win_state == WinState::Win {
        if opponent_choice == Shape::Rock {
            return RoundShape {
                opponent_choice: opponent_choice,
                player_choice: Shape::Paper,
            }
        }
        else if opponent_choice == Shape::Paper {
            return RoundShape {
                opponent_choice: opponent_choice,
                player_choice: Shape::Scissor,
            }
        }
        else if opponent_choice == Shape::Scissor {
            return RoundShape {
                opponent_choice: opponent_choice,
                player_choice: Shape::Rock,
            }
        }
    }

    panic!("Unhandled case of WinState and Shape");
}

fn compute_total_score(data:&Vec<RoundShape>) -> i32 {
    return data.iter().map(|d| compute_single_round_score(d)).sum();
}

fn compute_single_round_score(data:&RoundShape) -> i32 {
    let shape_score = compute_shape_score(&data.player_choice);
    let win_score = compute_win_score(&data.opponent_choice, &data.player_choice);
    return shape_score + win_score;
}

fn compute_shape_score(shape:&Shape) -> i32 {
    return SHAPES_SCORE_MAP.get(shape).unwrap().clone();
}

static SHAPES_SCORE_MAP: Lazy<HashMap<Shape, i32>> = Lazy::new(|| {
    let mut scores: HashMap<Shape, i32> = HashMap::new();

    scores.insert(Shape::Rock, 1);
    scores.insert(Shape::Paper, 2);
    scores.insert(Shape::Scissor, 3);

    return scores;
});

fn compute_win_score(opponent_choice:&Shape, player_choice:&Shape) -> i32 {
    let win_state = compute_win_state(opponent_choice, player_choice);
    return WINSTATES_SCORE_MAP.get(&win_state).unwrap().clone();
}

fn compute_win_state(opponent_choice:&Shape, player_choice:&Shape) -> WinState {
    if opponent_choice.clone() == player_choice.clone() {
        return WinState::Draw;
    }
    else if opponent_choice.clone() == Shape::Rock && player_choice.clone() == Shape::Paper {
        return WinState::Win;
    }
    else if opponent_choice.clone() == Shape::Paper && player_choice.clone() == Shape::Scissor {
        return WinState::Win;
    }
    else if opponent_choice.clone() == Shape::Scissor && player_choice.clone() == Shape::Rock {
        return WinState::Win;
    }
    else {
        return WinState::Loss;
    }
}

static WINSTATES_SCORE_MAP: Lazy<HashMap<WinState, i32>> = Lazy::new(|| {
    let mut scores: HashMap<WinState, i32> = HashMap::new();

    scores.insert(WinState::Loss, 0);
    scores.insert(WinState::Draw, 3);
    scores.insert(WinState::Win, 6);

    return scores;
});


fn get_data_str() -> &'static str {
    "B Y
A Z
C Z
A Y
A Y
B Y
C Y
A Y
B Y
B Y
A Y
B Z
B Y
A Y
C Y
B X
B Y
B Y
B Y
C Y
B Y
A Y
B Y
A Y
B Y
C Y
A Y
B X
B Y
B Y
B X
B Y
C Y
B Y
C Z
A X
B Y
B Y
A Z
B X
C Y
C Z
B Y
B Y
A Y
B X
B Y
B Y
B X
B Y
C Y
A Y
B Y
C Y
C X
B X
B X
A Z
C Y
B Y
C Z
B X
B Y
B Y
B X
B Y
B Z
B Y
B Y
B X
B Y
B X
C X
B Y
B X
A Y
B Y
B X
B Y
A Y
B X
B X
B Y
A Y
B Y
B Y
B Y
C Z
B X
B Y
B X
B X
B Y
B X
C Z
B Y
B Y
B Y
B Y
B Y
B X
A Y
B Y
C Y
C Z
A Y
B Y
A Y
C Z
B Y
B X
B Y
C X
A Y
B X
B Y
B X
B X
B X
A Y
C Z
B Y
A Y
B X
A Y
B Y
A Y
B X
B Y
B Y
B Y
B X
B X
C Z
B Z
B Y
B X
C Y
C Y
C Z
C X
C Y
B Y
B X
A Y
A Y
B X
C Z
B X
C X
B X
B Y
B Y
A Z
B Z
C Y
C Y
B Y
B Y
C Y
C Y
C Z
B Y
B X
B Y
B Y
C Y
B Y
B Y
B Y
B Y
B Y
C Y
A Z
B X
B Y
C Z
B Y
C Y
B Y
B X
C Y
B Y
B X
C Y
B Y
B Y
B Y
A Y
B X
B X
B Y
B Y
B X
C Z
B Y
A Y
A Y
B X
C X
A Y
B X
B X
B Y
B Y
A Y
C Y
C Z
C Y
B Y
B Y
A Y
A Y
A Y
B Y
B Y
A X
B Y
B Y
B X
B X
C Z
B X
B X
A Y
A Y
A Y
B Y
B Y
C Y
B X
A Y
B Y
C Z
B X
A Y
C Z
A Y
B X
C Y
B Y
B Y
C Y
B X
B X
B Y
B Y
B Y
B Y
A Y
B X
B X
B Y
A Y
B Z
A Y
B Y
C Y
B Y
B Y
B X
C Z
B Y
B Y
B X
B X
C Z
B Y
A Y
B Y
B X
C Y
A Z
C Z
B Y
B Y
B X
C Y
C X
B X
C Y
C Z
B X
B Y
B Y
C Z
B X
C X
A Z
A Y
B X
C X
B Y
A Z
A Z
A Y
B X
A Y
B Y
B Y
C Z
B X
A Z
B Y
B X
A Y
B Y
C Y
B Y
B X
B X
A Z
B Y
B Y
C Z
B X
B X
B Y
C Z
B X
B X
C Z
B X
A Y
B X
C Z
A Y
C X
B Y
B X
B Y
B Y
C Y
B X
A Z
A Y
B X
A Z
B X
B Y
B Y
A Z
C X
B Y
B Y
B Y
A Z
B Y
B X
C Y
C Z
B X
B Y
B Y
B Y
C Y
A Z
B Y
C Z
C X
B Y
C Y
B Y
B X
B Y
B Y
A Y
B Y
B Y
C Z
A Z
B X
C Y
B Y
B Y
B Y
A Y
A Y
B Y
A Y
B Y
A Y
B X
C Y
B Y
C X
A X
B X
A Y
C Y
B Y
A X
B X
A Z
B X
B Y
B Y
B X
B Y
B Y
B X
A Y
A Z
C Z
B Y
B Y
B X
C Z
C Z
B Y
A Y
B X
C Z
A Y
B X
B Z
B Y
B Y
B Y
B X
B Y
B X
B X
B Y
C Y
B Y
B Y
B Y
B Y
B Y
C Z
B X
B Y
B Y
B Y
B X
B X
C Y
B X
B X
C Z
B Y
B Y
B Y
B Y
B Y
C Y
B Y
B Y
B Y
B X
B Y
B X
B Y
B Y
C X
B Y
C X
B X
C Z
C X
B Y
A Y
A Z
A Y
C Y
B X
B Y
B Y
C Z
A Z
B Y
B Y
B Y
B Y
B Y
B Y
B Y
C Y
B Y
C Y
C X
B X
B X
C Z
A X
B X
B Y
A Y
B X
B Y
A Z
B Y
C Y
B X
B Y
B Y
C Y
C Y
B Y
B X
B X
B Y
B Y
B Y
B Y
C Z
B X
B Y
B Y
B X
B Y
B X
B X
B Y
B X
B Y
B Y
C Y
B X
B Y
B Y
B Y
A Y
B Y
A Z
B Y
C Y
C Y
B Y
B X
A X
B Y
A Y
B X
B Y
B Y
B X
C Y
C Z
B X
B Y
A Y
C Y
A Z
C Y
B Y
B Y
B Y
B X
C Y
B Y
B Y
A Y
A X
B Y
B X
B Y
B Y
A Y
B X
C X
B Y
A Y
C Y
B Y
B Y
A Y
C Y
A Y
C Y
B Y
B X
C Y
C Y
B Y
B Y
A Y
B Y
B Y
B Y
C Z
B X
B Y
B X
B X
A X
A Y
B Y
B X
A Z
B X
A Y
B Y
C Y
C Y
C Y
B Y
A Y
A Y
B Y
B Y
B Z
B Y
B X
A Y
B X
A Z
B Y
B Y
B X
B Y
C Y
A Z
B Y
C X
C Y
B Y
B Y
C X
B Y
A Y
A Y
C Z
B X
B X
B X
B X
B Y
C Z
B X
C Y
A Y
B Y
A Y
B Y
A Y
B Y
B Y
C Y
B Y
B Y
B X
B Y
B X
B Y
B X
B Y
A Z
C X
B X
C X
B X
A Y
C Y
B X
C Y
B X
B X
C Z
C Y
B X
B X
B X
B Y
C Y
B X
B X
A Z
B Y
B Y
C Y
B X
C Z
C Y
A Y
B X
C Y
C X
B Y
B Y
A X
B Y
B X
B Y
B X
C Y
B X
A Y
B Y
B X
B Y
B Y
B Y
C Y
C Y
C Y
C Y
B X
B Y
A Z
B X
B X
B Y
B Y
C Z
B Y
B X
B Y
B X
C Y
B Y
C Z
A X
B X
B Y
C Y
C X
B X
B X
B Y
B Y
B Y
B X
B Y
B Y
B X
C Z
B Y
B Y
B X
B X
B Y
B X
C Z
A Z
C X
C X
B Y
B X
A Y
B Y
B X
C Z
A X
B X
B Y
B X
B X
B Y
B Y
A Z
B X
A Y
A Y
B Y
B X
B Y
C Y
A Y
A Y
B X
B Z
C Y
C Y
B Y
C X
B X
C Z
C Z
B Y
C X
A Y
B Y
B X
A Y
B Y
C X
B Y
B X
B Y
C Z
A X
A Z
B Y
B Y
B X
B X
A Y
B Y
B X
B Y
C Y
B Y
B X
C Z
C X
C Y
A Y
B Y
A Y
B Y
B Y
B X
B X
A Y
A Y
B Y
B Y
B Y
A Y
B Y
B Y
B Y
C Z
A Z
C Y
B Y
B X
C Y
A Z
B X
B Y
A Z
C Y
B Y
B X
B Y
B Y
A Y
B X
B Z
B X
B X
B X
B X
B Y
B Y
B X
B Y
C Y
C X
C Z
B Y
B Y
C Y
A Y
B X
B X
B Y
B X
B Y
B Y
A Y
B Y
B Y
B Y
B Y
A Y
B X
C Z
B Y
B Y
B Y
B X
B Y
C Y
B X
B X
A Y
A X
A Y
C X
C Y
B Y
B Y
C Y
B X
B Y
B Y
C Y
B X
C X
B X
C Y
B Y
B X
B X
B Y
C X
B X
B Y
B X
B X
B Y
B X
B Y
B Y
B Y
C Y
B Y
B Y
C Z
B Y
B X
C Y
B Y
B Y
B X
B Y
A Y
B Y
A Y
B Y
B Y
A Z
B X
B Y
B Y
C Z
B X
B X
B Y
B Y
B Y
B X
C Y
C Y
B X
B Z
A X
B Z
C Y
B X
B X
A X
B Y
B X
C Z
C Y
B X
B Y
B Y
B Y
C Z
B Y
C Y
C Y
A Y
B X
B Y
B Y
B Y
A X
B Y
B Y
B X
B X
A Y
B X
B Y
A Z
B Y
C Z
B X
B Y
B Y
A Y
A Y
B Y
B Y
B Y
B Y
C Y
C Z
B X
B X
B Y
B Y
B X
B X
A X
A Y
B Y
B Y
B X
B Y
A Y
B Z
B X
C Z
B Y
B X
B X
B Y
B Y
B Y
C Y
C X
B X
C Z
B Z
B X
B X
C Z
C Y
B X
A Z
C Y
A Y
B X
B Y
C Z
B Y
B Y
B X
B Y
C Z
B Y
A Y
B X
B X
B X
C Y
B X
B Y
B X
B Y
B Y
A X
C Y
A Y
C Y
B X
B Y
B X
B X
B Y
B Y
B Y
B Y
B Y
B Z
B Y
A X
C Z
B X
A Y
C Z
B Y
C X
A Y
C Y
C X
B Y
B X
B X
C Z
C Y
A Z
C Y
A Y
B Z
A Y
B X
C X
A Z
C X
B Y
C X
B Y
A Y
A X
B X
B Y
B X
B X
B X
A Y
B Y
B X
B Y
A X
B Y
C X
B Y
B X
B Y
A Y
B X
B Y
B X
B Y
B X
B Y
B Y
A Z
A X
B Y
C Z
B Y
B Y
B Y
B Y
C Y
B Y
A Y
A Y
C Z
C Y
B Y
A Y
B Y
B X
A Y
C Y
B Y
B Y
A Y
B Y
A X
C X
B Y
B Y
C X
B Y
B X
A X
B Y
B Y
B Y
B X
B X
A Z
B Y
A X
B X
A Z
B X
C Z
B Y
B Y
B Y
B X
B Y
B Y
C Y
B Y
B X
A Y
C Z
B Y
B X
A Y
C Y
B X
B Y
B Y
C Z
A Y
B X
B Y
B X
B X
C X
B Z
C Y
B Y
B Y
B X
B Y
C Y
C Y
C Y
B Y
A Y
C Z
B Y
C X
C Y
B Y
B Y
A Z
B X
A Y
A Y
A Z
B X
A Y
C Z
B Y
B Y
A X
B X
B Y
C Z
B Y
B Y
B X
B Y
B X
B X
A X
C Y
C Y
C Y
B Y
B Y
C Z
B Y
B X
C X
B Y
C Z
B X
B Y
B Y
B Y
B X
B Y
B X
B X
B Y
B Y
B Y
B Y
B X
B Y
B Y
C Z
B X
B Y
C Y
B X
B Z
B Y
C Z
C Y
B Y
A Z
A Y
B X
B Y
C Y
A X
A Y
B X
B Y
C Z
B Y
C X
A Y
C Y
B Y
B X
B Y
B Y
B Y
B X
B Y
C X
A Z
B X
C Y
A Y
B X
B Y
B X
B Y
C X
A Y
A Y
C Z
B Y
C Y
B Y
B Y
B Y
B Y
B Y
C Y
A Y
B Y
B X
C Y
B Y
B Y
A Z
B Y
B Y
B X
B Y
B Y
B X
A Y
A Z
B X
B X
C Y
B Y
B X
C Y
B Y
A X
B X
B Y
A Z
B Y
B Y
B Y
B Y
B X
A X
B X
C Y
B Y
B Y
B X
C Y
B Y
B X
B Y
B X
A X
B Y
A Y
B X
C X
B Y
C Z
B Y
B Y
C Y
B Y
C X
B Y
B X
A Z
B Y
B X
B Y
A Y
B Y
B X
B X
B X
B Y
B Y
B Y
A Y
C X
B X
B X
C Z
B Y
A Y
A Z
A Y
B Y
B Y
B X
C X
C Y
C Z
B Y
B Y
B Y
B Y
B Y
B X
C Y
B Y
B Y
B X
B X
B Y
B Y
A Y
A Y
A Y
B X
B X
C Y
B Y
A Z
B X
C Y
B Y
B X
B Y
B Y
A Y
A Y
B Y
B Y
B X
B X
A Y
A X
A Z
C X
A Z
B X
B Y
C Y
A X
B X
C Z
B Y
C Y
A Y
C X
B Y
C X
A Y
B Y
B X
B Y
A X
B X
B X
B Y
B Y
B Y
B X
B Y
B X
B Y
A X
B Y
B X
B Y
B Y
B Y
B X
B X
A Y
B Y
A Z
B Y
B X
C Z
B X
B Y
B Y
B Y
B X
C Y
B Y
B Y
A Y
B X
B X
B Y
B Y
A Y
B Y
B X
B Y
B X
B Y
C X
C Y
B X
B X
B X
C Z
B Y
B Y
B X
B X
B Y
A Y
B Y
C X
A Y
B Y
B Y
C X
B X
A Y
C X
B Y
B X
C Z
B X
B Y
A Y
B Y
B X
C Y
A Y
B Y
A X
B Y
C Y
C X
B Y
B X
A Z
B Y
B Y
B X
B Y
B Y
B X
B Y
C Y
B X
B Y
B X
B X
C Y
B X
B X
A Y
B X
B Y
B Y
B Y
B Y
B Y
B Y
B Y
C X
B X
B X
A Y
B Y
A Y
B X
B Y
A Y
B Y
A Z
B X
A Y
C Z
A Y
A Z
B X
B Y
A Y
B X
B X
B Y
B Y
A Z
A Y
B X
C Y
B Y
B Z
C X
C X
B X
A Y
B X
B Y
B Y
A X
B Y
A X
B Y
A Y
B X
B X
A Z
A Y
A Y
C Z
B Y
B Y
C Z
B Y
B X
C Y
B Y
B X
A Y
B Y
B X
C X
C X
B Y
A Y
B Y
B Y
B Y
B X
A Y
B Y
B Y
A Y
B Y
B X
B X
C Y
C X
B Y
C X
B Y
C Y
B X
B Y
B X
B Y
B Y
B X
B Y
B Y
C Y
B X
B Y
B X
B Y
A Y
B X
A Y
B X
B Y
B X
C X
C Y
B Y
B X
B Y
B Y
B X
B Y
B Y
A Y
B Y
B X
B Y
B X
C Y
A Y
B Y
B X
B Z
B Y
B X
C Y
B Y
C Y
C Y
B X
C Z
B X
C Y
B Y
A Y
B Y
A X
B Y
B Y
B Y
B Y
A Z
B Y
B Y
A Y
C Y
B Y
B X
B Y
B X
B Y
B Z
B X
B X
B Y
B Y
B Y
B X
B Y
B X
B Y
B Y
A Y
C Z
B Y
B Y
B X
B X
B X
B Y
A Y
A Y
B X
B Y
B X
A X
B Y
B Y
C Y
A Y
C Z
A Z
A Y
B Y
B Y
B Y
B Y
B Y
C X
B Y
A Y
C X
C Y
B X
A Z
C Z
A Z
C Y
B X
B Y
B Y
B X
B Y
A Z
C Z
C X
B X
B Z
A Y
C Y
C Y
C Y
A Y
C X
B X
C Y
C Y
B Y
B Y
A Y
B Y
A Y
A Y
B X
B X
C Y
B Y
C Y
B Y
B Z
B Y
A Y
B X
B Y
A X
B X
B Y
B Y
C Y
B Y
C Z
B Z
A Y
A Y
A Y
B Y
B X
B Y
A Y
C X
B X
B Y
B X
C X
B Y
B X
B Y
B Y
B X
A Y
A Y
B Y
B Y
B Y
A Z
B Y
B Y
B Y
B Y
B Y
B X
B Y
B Y
B Y
B Y
B Y
B X
B X
B X
A X
C Y
C X
C Z
C Y
B X
B Y
A Z
B Y
C Y
B Y
B X
B Y
A Y
B X
B X
B X
C Y
B Y
B Y
B Y
B X
B Y
B Y
B Y
B Y
B Y
B Y
C X
B Y
A X
B X
C Z
B X
B Y
B X
B Y
C Y
B Y
B Y
B X
A Z
B Y
A X
B Y
C Z
C Y
B Y
B Y
B Y
C X
B Y
B Y
B X
A Y
C Z
B Y
B X
B Y
B Y
B Y
B X
B Y
B Y
B Y
C X
B X
B X
C Z
B Y
B Y
B X
A Z
B Y
B Y
C Y
C Y
A Y
C Y
A Y
B Y
B X
B Y
B X
C Y
B Y
B Y
B Y
B Y
B Y
C X
B X
B X
B Y
C X
C Z
B X
A Y
C Z
B X
B X
C Y
C Y
A Y
B Y
B X
B Y
B Y
A Z
A Z
B Y
B Y
B Y
B Y
B Y
B Y
B Y
B X
B Y
C Y
B Y
B X
A X
B Y
A Y
A Y
B Y
B Y
B X
B Y
B Y
C Y
A Y
B X
B X
B X
B Y
B Y
B Y
B Y
B X
B X
A Y
B X
B X
B X
B X
B Y
B X
A X
C Y
B Y
B Y
A Y
B Y
B X
C X
C Y
A Y
B Y
A Z
C Y
B Y
B Y
B Y
B X
B X
B Y
C X
B X
B Y
C X
B X
A Y
B Y
B X
B Y
B Y
B X
B Y
B Y
C Y
B X
B X
B X
A Y
B Y
B X
C Y
C Y
B X
A Y
B Y
C Y
B X
B Y
B X
B X
B Y
C Y
A Y
C Y
B X
C X
B Y
B X
A Y
C Y
B Y
B Y
B Y
C Z
C Y
A Z
A Y
B Y
B Y
B Y
B Y
A Y
B X
B Y
B Y
C Y
C X
B Y
B Y
B Y
B Y
B X
B X
B X
C Z
B Y
B Y
C Y
B X
B Y
B Y
A Z
B Y
C Z
B X
A Y
B X
B Y
A Y
A Z
A Z
B Z
B Y
B Y
A Y
C Z
B Y
C Z
B X
B Y
B Y
B Y
B Y
C Y
B X
B X
B X
B X
B X
B Y
A Z
A Y
B Y
B Y
B Y
C X
B Y
A Y
B Y
B Y
B X
B Y
C Y
A Z
A Y
C Y
C Z
B X
A Z
B X
B X
B Z
B Y
C Y
A Y
B Y
B Y
B X
C Z
B Y
B Y
A Z
A X
B Y
B X
B Y
B X
B X
B X
B X
A Y
B Y
A X
B X
B X
B Y
B X
B Y
B Y
A Y
B Y
C Y
A Z
A Y
B X
B Y
A Y
C X
B Y
C Y
B X
B Y
A Y
B Y
A Z
B Y
B Y
A Y
B X
C Y
B Y
B Y
C Z
B X
B Z
B Y
A Y
B Y
C X
B Y
B Y
B Y
B Y
B Y
C Z
C Z
B Y
C Y
C Z
A X
B Y
A Y
B X
B X
B Z
B X
A Y
B Y
B Y
B Y
A Z
C Y
B Y
B Y
C Y
C Z
C X
B Y
A X
B Y
A Y
C X
B Y
B Y
B Y
B Z
B X
B X
C Y
B X
B X
C Z
B Y
B X
B X
B Y
B Y
B X
C X
B Y
B Y
B X
A Y
B Y
C Y
B Y
A X
B Y
A Y
A Y
B Y
B X
B X
C X
B Y
B X
A Y
C X
A Y
B X
B Y
B Y
C Z
B X
B Y
B X
B Y
B Y
A Z
B Z
B Y
B Y
C Y
C X
C Y
C Y
B Y
B Y
B Y
C Y
A Z
A Z
B Y
B X
A Y
B X
B Y
A Y
B X
B Y
B X
C X
B Y
B Y
B X
B X
A Z
A Y
B Y
A Y
B Y
B X
B X
A Y
B X
B Y
B Y
B X
C X
C X
B Y
B Y
A Y
B X
B Y
B Y
B Y
B Y
C Y
B Y
C Z
B Y
B Y
C X
B X
B Y
B Y
B X
B X
B Y
B Y
B Y
B X
A Z
B Y
B X
C Z
B X
B Y
A Z
C Z
A Z
B X
B Y
B Y
B Y
B X
B Y
C Y
C X
C Y
A X
B Y
B Z
B Y
B Y
B Y
A Y
B X
B Y
C Y
B Y
B X
B X
B Y
B Y
B Y
C Z
B Y
B X
B Z
B X
B Y
B Y
B X
B X
A Y
B X
B X
B X
A Y
B X
B X
B Y
B X
A X
B Y
B Y
C Y
B X
B Y
B X
B X
C Y
B Y
B Y
B X
A X
C Y
C X
A Y
B X
B Y
B Y
B Y
B Y
B X
B Y
B Y
B Y
B Y
C Y
C Z
B Y
C X
B X
B Y
A Z
C X
B X
B Y
B Y
B X
B Y
B Y
B Y
B Y
B Y
B Y
B Y
C Y
B Y
C Y
B X
A Z
B Y
B X
A Y
B Y
B X
A Y
B X
B X
B X
B Y
B Y
B X
B Y
A Z
B Y
B Y
B Y
B Y
B Y
B Y
B Y
B Y
B X
B Y
B Y
A Y
B Y
B X
B X
C Y
C X
B Y
A Y
C Z
B X
B X
B Y
C Y
A Y
B Y
B Y
B X
B Y
B X
C Y
C Y
B Y
B X
B X
B Y
C Y
B Y
C Y
B Y
B Y
C Y
A Y
B Y
A Z
C X
B Y
B Y
B X
B X
C Z
B Y
B Y
B Y
B X
B X
A X
B X
B Z
B Y
B X
B X
B Y
B X
B X
B Y
B Y
B Y
B Y
A Y
B Y
B X
B Z
B Y
A X
A X
A Y
B Y
B Y
C Y
A Y
C Y
B Y
B X
B Y
B Y
B X
B Y
A Y
B Y
B Y
B X
B Y
A Y
B X
B Y"
}
